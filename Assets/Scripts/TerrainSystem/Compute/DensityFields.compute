#pragma kernel GenerateDensity 
#include "Noise.compute"

RWStructuredBuffer<int> points;

float startX;
float startZ;

int octaves;
float lacunarity;
float gain;

float scale;
float weightMultiplier;

float parameterX;
float parameterY;
float noiseWeight;
float softFloor;
float softFloorWeight;
float hardFloor;
float hardFloorWeight;
float domainWrapWeight;

int seed;

float remap(float v, float minOld, float maxOld, float minNew, float maxNew) {
    return minNew + (v-minOld) * (maxNew - minNew) / (maxOld-minOld);
}

float Fbm(float3 x)
{
    float value = 0.0;
    float amplitude = 1;
    float frequency = 1;

    for (int i = 0; i < octaves; i++) {
        
        value += amplitude * snoise(frequency * x);
        amplitude *= gain;
        frequency *= lacunarity;
    }
    
    return value;
}

int IndexFromCoord(int3 coord)
{
    return coord.z * 16 * 256 + coord.y * 16 + coord.x;
}

float3 PositionFromCoord(float3 coord)
{
    return float3((float) coord.x, (float) coord.y, (float) coord.z);
}

[numthreads(4,4,4)]
void GenerateDensity (uint3 id : SV_DispatchThreadID)
{
    float3 pos = PositionFromCoord(id + float3(startX, 0, startZ)) + float3(seed, 0, seed);

    float3 domainWrap = float3(
        Fbm((pos + float3(123, 653, 15)) / scale),
        0,
        Fbm((pos + float3(683, 103, 69)) / scale)
        );

    float3 domainInput = pos / scale + domainWrapWeight * domainWrap;
    float noise = Fbm(domainInput);
    
    // heightWrap
    float heightWrap = Fbm((pos + float3(123, 653, 15)) / 200) * 5;

    // moduloWrap
    parameterX += Fbm((pos + float3(653, 103, 913)) / 200) * 2;

    // edgeWrap
    parameterY += Fbm((pos + float3(84, 999, 8)) / 200) * 1.5;

    // change pos y to a noise value with x and z component
    float yOffset = pos.y + heightWrap;
    
    float value = -(yOffset - softFloor) * softFloorWeight + noise * noiseWeight + (yOffset % parameterX) * parameterY;

    if (yOffset < hardFloor) {
       value += hardFloorWeight;
    }

    value = ceil(value * 16);
    value = (int) max(-32, min(31, value ));
    
    // right here is the value output that should be stored
    
    points[IndexFromCoord(id)] = value;
}
